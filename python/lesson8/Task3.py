# 3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
# Проверить работу исключения на реальном примере.
# Необходимо запрашивать у пользователя данные и заполнять список.
# Класс-исключение должен контролировать типы данных элементов списка.
# Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно,
# пока пользователь сам не остановит работу скрипта, введя, например, команду “stop”.
# При этом скрипт завершается, сформированный список выводится на экран.


# Подсказка: для данного задания примем, что пользователь может вводить только числа и строки.
# При вводе пользователем очередного элемента необходимо реализовать проверку типа элемента и вносить его в список,
# только если введено число. Класс-исключение должен не позволить пользователю ввести текст (не число)
# и отобразить соответствующее сообщение. При этом работа скрипта не должна завершаться.


class OwnError(Exception):
    def __init__(self, txt):
        self.txt = txt


def is_float(value):
    try:
        float(value)
        return True
    except ValueError:
        return False


def iter_str_rec(array, i, acc):
    try:
        if i < len(array):
            if not is_float(array[i]):
                raise OwnError("Произошла ошибка, в вводимой строке не все элементы являются числом")
            return iter_str_rec(array, i + 1, acc + float(array[i]))
        return acc
    except OwnError as err:
        print(err)
        return acc


sum_str = 0
while True:
    str_input = input("Введите строку чисел")
    if "stop" in str_input:
        str_stop = str_input.split("stop")
        sum_str += iter_str_rec(str_stop[0].split(), 0, 0)
        print(sum_str)
        break
    sum_str += iter_str_rec(str_input.split(), 0, 0)
    print(sum_str)